---
import IntlBaseLayout from "@/layouts/IntlBaseLayout.astro";
import { getPageTranslations } from "@/i18n/i18n";
import { locales, type Locale } from "@/i18n/config";
import { getCollection, render } from "astro:content";
import { Calendar, Clock, User, ArrowLeft } from "@lucide/astro";
import ThemeToggle from "@/components/ThemeToggle.tsx";
import LanguageSwitcher from "@/components/LanguageSwitcher.tsx";
import type { AstroComponentFactory } from "astro/runtime/server/render/astro/index.js";
import Prose from "@/components/ui/prose.astro";

// Generate static paths for all blog posts in all locales using loader-based collections
export async function getStaticPaths() {
  const paths = [];

  for (const locale of locales) {
    try {
      // Get all blog entries for this locale using the new loader collections
      const collectionName =
        `blog-${locale}` as keyof import("astro:content").DataEntryMap;
      const blogEntries = await getCollection(collectionName);

      // Create paths for each blog entry
      for (const entry of blogEntries) {
        paths.push({
          params: {
            locale,
            slug: entry.id,
          },
          props: { entry },
        });
      }
    } catch (error: any) {
      console.warn(
        `Collection blog-${locale} not found:`,
        error?.message || error
      );
    }
  }

  return paths;
}

const { locale } = Astro.params;
const { entry } = Astro.props;

// If entry doesn't exist, return 404
if (!entry) {
  return Astro.redirect("/404");
}

// For loader-based collections, try different content rendering approaches
let Content: AstroComponentFactory | null = null;
try {
  const rendered = await render(entry);
  Content = rendered.Content;
} catch (renderError) {
  console.log("Render method failed, trying alternatives...", renderError);
}

// Get the translation function for this page
const { t } = await getPageTranslations(locale as Locale, ["common", "ui"]);
---

<IntlBaseLayout
  locale={locale}
  seo={{
    title: `${entry.data.title} - ${t("site.title", {}, "Anisa's Portfolio")}`,
    description:
      entry.data.excerpt ||
      t(
        "blog.subtitle",
        {},
        "Thoughts and insights on web development, technology, and best practices"
      ),
    openGraph: {
      title: entry.data.title,
      description: entry.data.excerpt || entry.data.title,
      type: "article",
      image: entry.data.image || "/opengraph-image.png",
    },
  }}
>
  <article class="max-w-4xl mx-auto px-4 py-12">
    <!-- Theme Toggle and Language Switcher -->
    <div class="flex justify-end items-center gap-2 mb-8">
      <LanguageSwitcher client:load currentLocale={locale} />
      <ThemeToggle client:only locale={locale} />
    </div>

    <!-- Blog post header -->
    <header class="mb-8">
      <div class="mb-4">
        <span
          class="inline-block px-3 py-1 text-sm font-medium bg-badge-bg text-badge-text rounded-full"
        >
          {entry.data.category}
        </span>
      </div>

      <h1 class="text-4xl md:text-5xl font-bold text-foreground mb-6">
        {entry.data.title}
      </h1>

      <div class="flex flex-wrap items-center gap-4 mb-6">
        <div class="flex items-center gap-2 text-muted">
          <Calendar class="w-5 h-5 icon" />
          <time>{entry.data.date}</time>
        </div>

        <div class="flex items-center gap-2 text-muted">
          <Clock class="w-5 h-5" />
          <span>{entry.data.readTime} {t("common.minutesRead")}</span>
        </div>

        <div class="flex items-center gap-2 text-muted">
          <User class="w-5 h-5" />
          <span>{entry.data.author}</span>
        </div>
      </div>

      <p class="text-xl text-muted leading-relaxed">
        {entry.data.excerpt}
      </p>
    </header>

    <!-- Blog post content -->
    <Prose class="max-w-none">
      {Content && <Content />}
    </Prose>

    <!-- Tags -->
    {
      entry.data.tags && entry.data.tags.length > 0 && (
        <div class="mt-12 pt-8 border-t border-border">
          <h3 class="text-lg font-semibold text-foreground mb-4">
            {t("common.tags")}
          </h3>
          <div class="flex flex-wrap gap-2">
            {entry.data.tags.map((tag: string) => (
              <span class="px-3 py-1 text-sm bg-muted text-foreground rounded-full">
                #{tag}
              </span>
            ))}
          </div>
        </div>
      )
    }

    <!-- Navigation -->
    <div class="mt-12 pt-8 border-t border-border">
      <a
        href={`/${locale}#blog`}
        class="inline-flex items-center gap-2 text-link hover:text-link-hover transition-colors"
      >
        <ArrowLeft class="w-5 h-5" />
        {t("common.backToBlog")}
      </a>
    </div>
  </article>
</IntlBaseLayout>
