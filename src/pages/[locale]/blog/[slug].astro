---
import IntlBaseLayout from "@/layouts/IntlBaseLayout.astro";
import { getPageTranslations } from "@/i18n/i18n";
import { locales, type Locale } from "@/i18n/config";
import { getCollection, render } from "astro:content";
import { Calendar, Clock, User, ArrowLeft } from "@lucide/astro";
import type { AstroComponentFactory } from "astro/runtime/server/render/astro/index.js";

// Generate static paths for all blog posts in all locales using loader-based collections
export async function getStaticPaths() {
  const paths = [];

  for (const locale of locales) {
    try {
      // Get all blog entries for this locale using the new loader collections
      const collectionName =
        `blog-${locale}` as keyof import("astro:content").DataEntryMap;
      const blogEntries = await getCollection(collectionName);

      // Create paths for each blog entry
      for (const entry of blogEntries) {
        paths.push({
          params: {
            locale,
            slug: entry.id,
          },
          props: { entry },
        });
      }
    } catch (error: any) {
      console.warn(
        `Collection blog-${locale} not found:`,
        error?.message || error
      );
    }
  }

  return paths;
}

const { locale } = Astro.params;
const { entry } = Astro.props;

// If entry doesn't exist, return 404
if (!entry) {
  return Astro.redirect("/404");
}

// For loader-based collections, try different content rendering approaches
let Content: AstroComponentFactory | null = null;
try {
  const rendered = await render(entry);
  Content = rendered.Content;
} catch (renderError) {
  console.log("Render method failed, trying alternatives...", renderError);
}

// Get the translation function for this page
const { t } = await getPageTranslations(locale as Locale, ["common", "ui"]);
---

<IntlBaseLayout locale={locale}>
  <article class="max-w-4xl mx-auto px-4 py-12">
    <!-- Blog post header -->
    <header class="mb-8">
      <div class="mb-4">
        <span
          class="inline-block px-3 py-1 text-sm font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 rounded-full"
        >
          {entry.data.category}
        </span>
      </div>

      <h1
        class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6"
      >
        {entry.data.title}
      </h1>

      <div
        class="flex flex-wrap items-center gap-4 text-gray-600 dark:text-gray-400 mb-6"
      >
        <div class="flex items-center gap-2">
          <Calendar class="w-5 h-5" />
          <time>{entry.data.date}</time>
        </div>

        <div class="flex items-center gap-2">
          <Clock class="w-5 h-5" />
          <span>{entry.data.readTime} {t("common.minutesRead")}</span>
        </div>

        <div class="flex items-center gap-2">
          <User class="w-5 h-5" />
          <span>{entry.data.author}</span>
        </div>
      </div>

      <p class="text-xl text-gray-600 dark:text-gray-300 leading-relaxed">
        {entry.data.excerpt}
      </p>
    </header>

    <!-- Blog post content -->
    <div class="prose prose-lg dark:prose-invert max-w-none">
      {Content && <Content />}
    </div>

    <!-- Tags -->
    {
      entry.data.tags && entry.data.tags.length > 0 && (
        <div class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">
            {t("common.tags")}
          </h3>
          <div class="flex flex-wrap gap-2">
            {entry.data.tags.map((tag: string) => (
              <span class="px-3 py-1 text-sm bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full">
                #{tag}
              </span>
            ))}
          </div>
        </div>
      )
    }

    <!-- Navigation -->
    <div class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
      <a
        href={`/${locale}#blog`}
        class="inline-flex items-center gap-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors"
      >
        <ArrowLeft class="w-5 h-5" />
        {t("common.backToBlog")}
      </a>
    </div>
  </article>
</IntlBaseLayout>
